CREATE TABLE  "AW2023_USERS" 
   (	"ID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  NOT NULL ENABLE, 
	"USERNAME" VARCHAR2(30) COLLATE "USING_NLS_COMP" NOT NULL ENABLE, 
	"PASSWORD_HASH" VARCHAR2(255) COLLATE "USING_NLS_COMP" NOT NULL ENABLE, 
	"SHARED_SECRET" VARCHAR2(16) COLLATE "USING_NLS_COMP", 
	 CONSTRAINT "AW2023_USERS_PK" PRIMARY KEY ("ID")
  USING INDEX  ENABLE, 
	 CONSTRAINT "AW2023_USERS_UK1" UNIQUE ("USERNAME")
  USING INDEX  ENABLE
   )  DEFAULT COLLATION "USING_NLS_COMP"
/
create or replace package AW2023_AUTH as
function get_hash (
  p_username in varchar2
, p_password in varchar2 )
  return varchar2;
function authenticate
( p_username in varchar2
, p_password in varchar2
)
return boolean;
procedure authenticate_using_tfa
( p_username in varchar2
, p_password in varchar2
);
function validate_otp
( p_username in varchar2
, p_otp      in number
) return boolean;
end;
/
create or replace package body AW2023_AUTH as
  function get_hash (
    p_username in varchar2
  , p_password in varchar2 )
    return varchar2
  is
    l_salt varchar2(30) := 'ApexWorld2023';
  begin
    return oos_util_crypto.hash(utl_raw.cast_to_raw(upper(p_username) || l_salt || p_password ), 3 );
  end get_hash;

  function authenticate
  ( p_username in varchar2
  , p_password in varchar2
  )
  return boolean
  is
    cursor c_usr
    ( b_username varchar2
    , b_password_hash varchar2
    )
    is
    select 'x'
    from   aw2023_users au
    where  upper(au.username) = upper(b_username)
    and    au.password_hash = b_password_hash;
    r_usr          c_usr%rowtype;
    l_return_value boolean;
  begin
    open c_usr
    ( b_username => p_username
    , b_password_hash => get_hash(p_username, p_password)
    );
    fetch c_usr into r_usr;
    l_return_value := c_usr%found;
    close c_usr;
    return l_return_value;
  exception
    when others
    then
      return false;
  end authenticate;

  procedure authenticate_using_tfa
  ( p_username in varchar2
  , p_password in varchar2
  )
  is
    l_tfa_enabled varchar2(1);
    login_failed  exception;
  begin
    begin
      select case when shared_secret is null then 'N' else 'Y' end
      into   l_tfa_enabled
      from   aw2023_users
      where  lower(username) = lower(p_username)
      ;
    exception
      when no_data_found then
        raise login_failed;
    end;

    if aw2023_auth.authenticate (p_username=>p_username
                                ,p_password=>p_password)
    then
      apex_util.set_session_state(p_name => 'P9999_TFA_ENABLED', p_value => l_tfa_enabled);
    else
      raise login_failed;
    end if;
  exception
    when login_failed then
      apex_authentication.login(
        p_username => p_username
      , p_password => null
      );
  end authenticate_using_tfa;

  function validate_otp
  ( p_username in varchar2
  , p_otp      in number
  ) return boolean
  as
    l_shared_secret aw2023_users.shared_secret%type;
  begin
    select shared_secret
    into   l_shared_secret
    from   aw2023_users
    where  lower(username) = lower(p_username);
    return oos_util_totp.validate_otp( p_secret => l_shared_secret
                                     , p_otp    => p_otp           ) = 1;
  exception
    when no_data_found then
      return false;
  end validate_otp;
end;
/
